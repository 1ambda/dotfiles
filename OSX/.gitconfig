[user]
	email = 1amb4a@gmail.com
	name = 1ambda
[core]
	warnAmbiguousRefs = false
  editor = vim
	excludesfile = /Users/1002471/.gitignore_global
	autocrlf = input
	ignorecase = false
[color]
	diff = auto
	status = auto
	branch = auto
[alias]
    ci = commit -v
    cam = commit --amend
    cm = commit -m
    cc = commit -c
    cma = commit -m -a
    c = commit

    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"
    merge-log = "!git lg `git merge-span .. $1`"
    merge-diff = "!git diff `git merge-span ... $1`"
    merge-difftool = "!git difftool `git merge-span ... $1`"

    co = checkout
    com = checkout master
    cod = checkout develop
    cor = checkout release

    find = log --pretty=\"format:%Cgreen%H %Cblue%s\" --name-status --grep

    cl = clone

    fo = fetch origin
    fs = fetch stash

    psoh = push origin HEAD
    psom = push origin master
    psod = push origin develop
    psor = push origin release
    pssh = push stash HEAD
    pssm = push stash master
    pssd = push stash develop
    pssr = push stash release

    publish = "!git push -u origin $(git bn)"
    unpublish = "!git push origin :$(git bn)"
    recreate = "!f() { [[ -n $@ ]] && git checkout \"$1\" && git unpublish && git checkout \"$2\" && git branch -D \"$1\" && git checkout -b \"$1\" && git publish; }; f"

    plr = pull origin --rebase
    plom = pull origin master
    plod = pull origin develop
    plsm = pull stash master
    plsd = pull stash develop

    pr = "!f() { git fetch -fu ${2:-upstream} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"

    a = !git add . && git status
    aa = !git add --all . && git status

    s = status --short --branch
    st = status

    df = diff
    dfs = "!git --no-pager diff --stat"
    dfc = diff --cached
    dfcs = "!git --no-pager diff --cached --stat"
    dfh = diff HEAD
    dfhs = "!git --no-pager diff HEAD --stat"
    dfl = diff HEAD~1 HEAD
    dff = diff --name-only

    insp = "!f() { git ll "$1"^.."$1"; }; f"
    inspd = "!f() { git diff "$1"^.."$1"; }; f"

    rma = remote add
    rmr = remote remove
    rmv = remote -v
    rmso = remote show origin -n

    rp = rev-parse

    rsa = reset HEAD
    rsc = reset HEAD^
    rsm = reset --mixed
    rss = reset --soft
    rsh = reset --hard

    br = branch -vv -a
    bv = branch -v
    bd = branch -D
    bn = "!git rev-parse --abbrev-ref HEAD"

    sl = stash list
    sa = stash apply
    ss = stash save
    ssu = stash save -u

    fi = flow init
    fv = flow version

    ffs = flow feature start
    fff = flow feature finish
    ffl = flow feature list

    lr = log --grep
    lp = log -p
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    lg = "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)[%an]%Creset' --abbrev-commit"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

    last = "!git ll -1"

    type = cat-file -t
    dump = cat-file -p

    me = config user.name
    rank = shortlog -sn --no-merges
    root = rev-parse --git-dir

    today = "log --since=midnight --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)[%an]%Creset' --abbrev-commit"
    yesterday = "log --since yesterday --until=midnight --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)[%an]%Creset' --abbrev-commit"

    outgoing = "log --pretty=oneline --abbrev-commit --graph @{u}.."
    incoming = "!git fetch && git log --pretty=oneline --abbrev-commit --graph ..@{u}"

    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumels = "!git ls-files -v | grep '^[[:lower:]]'"

[push]
    default = matching
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
