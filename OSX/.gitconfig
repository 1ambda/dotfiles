[user]
	email = 1amb4a@gmail.com
	name = 1ambda
[core]
    warnAmbiguousRefs = false
    editor = vim
	excludesfile = ~/.global_gitignore
	autocrlf = input
	ignorecase = false
	pager = diff-so-fancy | less --tabs=4 -RFX
[color]
	diff = auto
	status = auto
	branch = auto
[alias]
    c = commit
    ci = commit -v
    cm = commit -m
    cf = commit --fixup
    ca = commit --amend
    cane = commit --amend --no-edit

    amend = commit --amend -C HEAD

    wip = !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m \"[WIP]\" && git commit --amend"
    unwip = !"git log -n 1 | grep -q -c -e \"\\[WIP\\]\" && git reset HEAD~1"

    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"
    merge-log = "!git lg "git merge-span .. $1""
    merge-diff = "!git diff "git merge-span ... $1""
    merge-difftool = "!git difftool "git merge-span ... $1""

	# use `gco` instead
    co =  checkout
    cob = checkout -b
    com = checkout master
    cod = checkout develop
    cor = checkout release

    find = log --pretty=\"format:%Cgreen%H %Cblue%s\" --name-status --grep

    cl = clone

    fo = fetch origin
    fs = fetch stash

    psoh = push origin HEAD
    psom = push origin master
    psod = push origin develop
    psor = push origin release
    psuh = push upstream HEAD
    psum = push upstream master
    psud = push upstream develop
    psur = push upstream release

    publish = "!git push -u origin $(git bn)"
    unpublish = "!git push origin :$(git bn)"
    recreate = "!f() { [[ -n $@ ]] && git checkout \"$1\" && git unpublish && git checkout \"$2\" && git branch -D \"$1\" && git checkout -b \"$1\" && git publish; }; f"

	up = pull --rebase --autostash
    plr = pull origin --rebase
    plom = pull origin master
    plod = pull origin develop

    pr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"

    a = !git add . && git status
    aa = !git add --all . && git status

    s = status --short --branch
    st = status

	df = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\"  && git diff --color \"$@\" | diff-so-fancy | less --tabs=4 -RFX; }; f"
    dfs = "!git --no-pager diff --stat"
	dfc = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\"  && git diff --cached --color \"$@\" | diff-so-fancy | less --tabs=4 -RFX; }; f"
	dfh = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\"  && git diff HEAD --color \"$@\" | diff-so-fancy | less --tabs=4 -RFX; }; f"
    dfhs = "!git --no-pager diff HEAD --stat"
    dff = diff --name-only
    dfcf = git diff --name-only --diff-filter=U

    insp = "!f() { git ll "$1"^.."$1"; }; f"
	inspd = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\"  && git diff "$1"^.."$1"; --color \"$@\" | diff-so-fancy | less --tabs=4 -RFX; }; f"
    head = !"git log -n1"
    lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

    rma = remote add
    rmr = remote remove
    rmv = remote -v
    rmso = remote show origin -n

    rp = rev-parse

    rsa = reset HEAD
    rsc = reset HEAD^
    rsm = reset --mixed
    rss = reset --soft
    rsh = reset --hard

    sb = show-branch
    br = branch
    bra = branch -vv -a
    bv = branch -v
    bd = branch -D
    bn = "!git rev-parse --abbrev-ref HEAD"

    sl = stash list
    sa = stash apply
    ss = stash save
    ssu = stash save -u

    fi = flow init
    fv = flow version

    ffs = flow feature start
    fff = flow feature finish
    ffl = flow feature list

    lr = log --grep
    lp = log -p
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
	# use `gl` instead
    lg = "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)[%an]%Creset' --abbrev-commit"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"



    last = "!git ll -1"

    type = cat-file -t
    dump = cat-file -p

    me = config user.name
    rank = shortlog -sn --no-merges
    root = rev-parse --git-dir

    today = "log --since=midnight --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)[%an]%Creset' --abbrev-commit"
    yesterday = "log --since yesterday --until=midnight --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)[%an]%Creset' --abbrev-commit"

    outgoing = "log --pretty=oneline --abbrev-commit --graph @{u}.."
    incoming = "!git fetch && git log --pretty=oneline --abbrev-commit --graph ..@{u}"

    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumels = "!git ls-files -v | grep '^[[:lower:]]'"

    lsft = ls-files -t
    lsfo = ls-files --others
    lsfe = ls-files --others -i --exclude-standard

[push]
    default = matching
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
